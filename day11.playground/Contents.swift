import UIKit


// PROTOCOL

protocol Identifiable {
    var id: String { get set }
}


struct User: Identifiable { //: Identifiable diyerek bu struct'Ä±n Identifiable protokolÃ¼ne                                  uyduÄŸunu (conform ettiÄŸini) sÃ¶yledik.
    var id: String
}


func displayId(thing: Identifiable){
    print("My ID is \(thing.id)")
}


/*Bu fonksiyonun parametresi Identifiable protokolÃ¼nÃ¼ kullanan herhangi bir tÃ¼r olabilir.
 
 Bu sayede sadece User deÄŸil, Identifiable protokolÃ¼ne uyan baÅŸka tÃ¼rler de bu fonksiyona gÃ¶nderilebilir.

 thing.id diyebiliyoruz Ã§Ã¼nkÃ¼ protokol bu Ã¶zelliÄŸi garanti ediyor.

*/


//Protocols, bir ÅŸablon gibidir. Bir tÃ¼rÃ¼n (struct, class, enum) sahip olmasÄ± gereken minimum Ã¶zellikleri ve metotlarÄ± tanÄ±mlar.

struct Book {
    var name: String
}

protocol Purcaseable {
    var name: String { get set}
}

func buy(_book: Book){
    print("I'm buying \(_book.name)")
}

func buy2(_item: Purcaseable){
    print("I'm buying \(_item.name)")
}

struct Coffe: Purcaseable {
    var name: String
    var strength: Int // Ekstra Ã¶zellik
}

//Protokoller sadece zorunlu olan Ã¶zellikleri belirler. Her tÃ¼r kendi ekstra Ã¶zelliklerini yine de ekleyebilir





print("------------------------------------------------------------------")

// Protocol inheritance

protocol Payable {
    func calculateWages () -> Int
}

protocol NeedsTraining {
    func study()
}

protocol HasVacation {
    func takeVacation(days: Int)
}

protocol Employee:Payable, NeedsTraining, HasVacation {
    
}


protocol Computer {
    var price: Double { get set }
    var weight: Int { get set }
    var cpu: String { get set }
    var memory: Int { get set }
    var storage: Int { get set }
}

protocol Laptop {
    var price: Double { get set }
    var weight: Int { get set }
    var cpu: String { get set }
    var memory: Int { get set }
    var storage: Int { get set }
    var screenSize: Int { get set }
}

protocol Product {
    var price: Double { get set }
    var weight: Int { get set }
}

protocol Computer2: Product {
    var cpu: String { get set }
    var memory: Int { get set }
    var storage: Int { get set }
}

protocol Laptop2: Computer {
    var screenSize: Int { get set }
}


/*Laptop aynÄ± zamanda bir Computer ve Productâ€™tÄ±r.
 
 Kodlar daha tekrarÄ± az ,temiz, okunabilir ve sÃ¼rdÃ¼rÃ¼lebilir olur.*/





print("------------------------------------------------------------------")


//Extension
//Extension, mevcut bir tÃ¼rÃ¼n (Ã¶rneÄŸin Int, String, Array, kendi structâ€™larÄ±n veya classâ€™larÄ±n) fonksiyonelliÄŸini sonradan geniÅŸletmemize olanak tanÄ±r.


extension Int {
    func squared() -> Int {
        return self * self
    }
}

let number = 8
print(number.squared()) // 64  ArtÄ±k tÃ¼m Int deÄŸerleri squared() metoduna sahiptir:




//Stored Property Eklenemez, Ama Computed Property Eklenebilir
extension Int {
    var isEven: Bool {
        return self % 2 == 0
    }
}

let n = 10
print(n.isEven)



print("------------------------------------------------------------------")
/*Swiftâ€™te Extension Ne Zaman KullanÄ±lÄ±r?
1. ğŸ“¦ Kendi Kodumuzu DÃ¼zenlemek Ä°Ã§in
Extensionâ€™lar kodu amaÃ§larÄ±na gÃ¶re gruplamak iÃ§in Ã§ok faydalÄ±dÄ±r. Ä°ki ana yaklaÅŸÄ±m vardÄ±r:*/

/*a) Conformance Grouping (Uygunluk Grubu)
 Bir typeâ€™Ä±n (struct/class) bir protokole uymasÄ±nÄ± saÄŸlamak iÃ§in gerekli fonksiyonlarÄ± ayrÄ± bir extension iÃ§inde yazmak.*/

protocol Printable {
    func printDescription()
}

struct Book3 {
    var title: String
}

extension Book3: Printable {
    func printDescription() {
        print("Title: \(title)")
    }
}


//b) Purpose Grouping (Amaca GÃ¶re Gruplama)
//Bir tÃ¼rle ilgili belli bir iÅŸlevi (Ã¶rneÄŸin veri kaydetme veya yÃ¼kleme) tek bir uzantÄ± iÃ§inde gruplayabilirsiniz:

extension Book {
    func saveToDisk() {
        // kaydetme iÅŸlemi
    }
    
    func loadFromDisk() {
        // yÃ¼kleme iÅŸlemi
    }
}



/*2.Appleâ€™Ä±n veya BaÅŸkasÄ±nÄ±n TanÄ±mladÄ±ÄŸÄ± TÃ¼rleri GeniÅŸletmek Ä°Ã§in
Appleâ€™Ä±n yazdÄ±ÄŸÄ± String, Int, Array gibi tÃ¼rleri deÄŸiÅŸtiremeyiz, ama onlara extension ile yeni Ã¶zellikler ekleyebiliriz.*/

extension String {
    var isLong: Bool {
        return self.count > 100
    }
}


print("------------------------------------------------------------------")
//Protocol Extensions Nedir?
//Bir protokole ait tÃ¼m tÃ¼rlere ortak davranÄ±ÅŸ kazandÄ±rmanÄ±zÄ± saÄŸlar.


let pythons = ["Eric", "Graham", "John", "Michael", "Terry", "Terry"]
let beatles = Set(["John", "Paul", "George", "Ringo"])

/*Swiftâ€™te hem Array hem de Set, Collection protokolÃ¼nÃ¼ kullanÄ±r.
 
 Biz de bu protokole bir fonksiyon ekleyebiliriz:
*/

extension Collection {
    func summarize() {
        print("There are \(count) of us:")
        for name in self {
            print(name)
        }
    }
}
pythons.summarize()
beatles.summarize()


print("------------------------------------------------------------------")

//Protocol-oriented programming

protocol Identifiable2 {
    var id: String { get set }
    func identify()
}

/*Buraya kadar klasik bir protokol tanÄ±mÄ±. Her Identifiable tÃ¼rÃ¼ identify() fonksiyonunu yazmak zorunda.Ama biz bir default (varsayÄ±lan) tanÄ±m verirsek:*/

extension Identifiable2 {
    func identify() {
        print("My ID is \(id).")
    }
}
/*ArtÄ±k bu protokolÃ¼ kullananlar ekstra kod yazmadan bu davranÄ±ÅŸÄ± alÄ±rlar:*/

struct User2: Identifiable2 {
    var id: String
}

let twostraws = User2(id: "twostraws")
twostraws.identify() // My ID is twostraws.
